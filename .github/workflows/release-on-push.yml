name: Release

on:
  push:
    branches:
      - develop-mame

permissions:
  contents: write

env:
  NODE_ENV: production

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4.1.1
        with:
          submodules: true
          fetch-tags: true
          fetch-depth: 2
      - name: Save current version
        id: current_version
        run: echo "current_version=$(jq -r '.version' ./package.json)" >> $GITHUB_OUTPUT
      - name: Checkout previous commit
        run: git checkout HEAD^
      - name: Save version on previous commit
        id: previous_version
        run: echo "previous_version=$(jq -r '.version' ./package.json)" >> $GITHUB_OUTPUT
      - name: Checkout main branch
        run: git checkout $(git name-rev --name-only $(git reflog -n 1 --skip=1 --pretty='%H'))
      - name: Check if version changed
        id: version_changed
        run: |
          VERSION_CHANGED=$(if [ '${{ steps.previous_version.outputs.previous_version }}' == '${{ steps.current_version.outputs.current_version }}' ]; then echo false; else echo true; fi)
          echo "version_changed=$VERSION_CHANGED" >> $GITHUB_OUTPUT
      - name: Determine new tag name
        id: tag_name
        run: |
          SUFFIX=$(if [ '${{ steps.version_changed.outputs.version_changed }}' == 'true' ]; then echo ''; else echo ".$(date '+%Y%m%d_%H%M%S')"; fi)
          echo "tag_name=${{ steps.current_version.outputs.current_version }}$SUFFIX" >> $GITHUB_OUTPUT
        env:
          TZ: Asia/Tokyo
      - name: Determine starting point of release note generation
        id: notes_start_tag
        run: |
          START_TAG=$(if [ '${{ steps.version_changed.outputs.version_changed }}' == 'true' ]; then echo '${{ steps.previous_version.outputs.previous_version }}'; else echo '${{ steps.current_version.outputs.current_version }}'; fi)
          echo "notes_start_tag=$START_TAG" >> $GITHUB_OUTPUT
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false
      - uses: actions/setup-node@v4.0.2
        with:
          node-version-file: '.node-version'
          cache: 'pnpm'
      - run: corepack enable
      - run: pnpm i --frozen-lockfile
      - name: Check pnpm-lock.yaml
        run: git diff --exit-code pnpm-lock.yaml
      - name: Build
        run: pnpm run build
      - name: Note latest commit hash
        run: git rev-parse HEAD > ./built/hash
      - name: Archive (tar)
        run: tar -zcvf ./built.tar.gz ./built ./packages/misskey-js/built ./packages/backend/built
      - name: Create release
        run: gh release create ${{ steps.tag_name.outputs.tag_name }} ./built.tar.gz --latest --generate-notes --notes-start-tag ${{ steps.notes_start_tag.outputs.notes_start_tag }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
